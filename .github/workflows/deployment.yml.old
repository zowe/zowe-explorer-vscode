name: Deployment of Zowe Explorer and related extensions

on:
  push:
    branches:
      - main
      - v1-lts
    paths:
      - package.json
  workflow_dispatch:
    inputs:
      version:
        description: Version to be published
        default: v2.6.0
        required: false
      # create_release:
      #   description: Create the release even if publishing already happened
      #   default: 'false'
      #   required: false

jobs:
  check_version:
    runs-on: ubuntu-22.04
    outputs:
      should_publish: ${{ steps.should_publish_any.outputs.should_publish != null }}
    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v2

      - name: Get Top-Level package.json
        run: echo "market_ze=$(cat package.json)" >> $GITHUB_OUTPUT
        id: get_info

      - name: Get the Zowe Explorer package.json
        run: echo "package=$(cat packages/zowe-explorer/package.json)" >> $GITHUB_OUTPUT
        id: get_ze_package

      - name: Get the Zowe Explorer - FTP Extension package.json
        run: echo "package=$(cat packages/zowe-explorer-ftp-extension/package.json)" >> $GITHUB_OUTPUT
        id: get_ze_ftp_package

      - name: Get the Zowe Explorer - API package.json
        run: echo "package=$(cat packages/zowe-explorer-api/package.json)" >> $GITHUB_OUTPUT
        id: get_ze_api_package

      - name: Get the Zowe Explorer - ESLint Extension package.json
        run: echo "package=$(cat packages/eslint-plugin-zowe-explorer/package.json)" >> $GITHUB_OUTPUT
        id: get_ze_eslint_package

      - name: Verify that Deployment is Required
        run: echo "should_publish=true" >> $GITHUB_OUTPUT
        if: |
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_package.outputs.package).version ||
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_ftp_package.outputs.package).version ||
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_api_package.outputs.package).version
        # if: |
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_ftp_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_api_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_eslint_package.outputs.package).version
        id: should_publish_any

  deploy:
    runs-on: ubuntu-22.04
    needs: check_version
    if: needs.check_version.outputs.should_publish
    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Configure Git
        run: |
          git config --global user.name "zowe-robot"
          git config --global user.email "zowe.robot@gmail.com"

      - name: Install CLIs for Workflow use
        run: npm install -g vsce@1.103.1 yarn ovsx

      # Avoid adding node_modules to each .github/actions folder
      - name: Install Internal Dependencies for Actions to Work
        run: npm install @actions/core
        working-directory: ./.github/actions/deploy-vscode-extension

      - name: Install Project Dependencies
        run: yarn

      # TODO: Update ZE dependency on the ze-api to match the top-level version once published
      #       Maybe this will help https://yarnpkg.com/cli/version/apply

      - name: Get the Zowe Explorer Display Name
        run: echo "package_nls=$(cat packages/zowe-explorer/package.nls.json)" >> $GITHUB_OUTPUT
        id: get_ze_name

      - name: Publish the Zowe Explorer
        id: deploy_zowe_explorer
        uses: ./.github/actions/deploy-vscode-extension
        with:
          name: ${{ fromJson(steps.get_ze_name.outputs.package_nls).displayName }}
          package: packages/zowe-explorer
          token: ${{ secrets.VSCODE_PUBLISHER_TOKEN }} ${{ secrets.VSCODE_ZOWE_ROBOT_PUBLISH_TOKEN }}

      - name: Get the FTP Extension package.json
        run: echo "package=$(cat packages/zowe-explorer-ftp-extension/package.json)" >> $GITHUB_OUTPUT
        id: get_ftp_name

      - name: Publish the FTP Extension for Zowe Explorer
        id: deploy_zowe_explorer_ftp_extension
        uses: ./.github/actions/deploy-vscode-extension
        with:
          name: ${{ fromJson(steps.get_ftp_name.outputs.package).displayName }}
          package: packages/zowe-explorer-ftp-extension
          token: ${{ secrets.VSCODE_PUBLISHER_TOKEN }} ${{ secrets.VSCODE_ZOWE_ROBOT_PUBLISH_TOKEN }}

      - name: Get the NPM API package.json
        run: echo "package=$(cat packages/zowe-explorer-api/package.json)" >> $GITHUB_OUTPUT
        id: get_npm_api_info

      - name: Publish the Zowe Explorer APIs
        id: deploy_zowe_explorer_api
        uses: ./.github/actions/deploy-npm-package
        with:
          name: ${{ fromJson(steps.get_npm_api_info.outputs.package).description }}
          package: packages/zowe-explorer-api
          token: ${{ secrets.NPM_PUBLISHER_TOKEN }}

      # - name: Publish the ESLint plugin for Zowe Explorer
      #   id: deploy_eslint_plugin_zowe_explorer
      #   uses: ./.github/actions/deploy-eslint-plugin-zowe-explorer
      #   with:
      #     package: packages/eslint-plugin-zowe-explorer

      - name: Create Packages for Archiving Purposes
        run: yarn package

      - name: Archive Built Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: zowe-explorer-artifacts
          path: dist/*

      - name: Get Top-Level package.json
        run: echo "top_package=$(cat package.json)" >> $GITHUB_OUTPUT
        id: get_version
      - name: Get most recent GitHub release version
        id: get_gh_version
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      # Removed step because of issues with publishing
      # - name: Check if files were staged
      #   run: echo "files_staged=$(git diff --cached --quiet || echo $?)" >> $GITHUB_OUTPUT
      #   id: check_project

      - name: Check version is bumped
        if: ${{ !contains(steps.get_gh_version.outputs.tag, fromJson(steps.get_version.outputs.top_package).version) }}
        run: echo "version_bumped=true" >> $GITHUB_OUTPUT
        id: check_project

      - name: Check version is a pre-release
        if: ${{ endsWith(fromJson(steps.get_version.outputs.top_package).version, 'SNAPSHOT') }}
        run: echo "pre_release=true" >> $GITHUB_OUTPUT
        id: is_pre_release

      - name: Create the Release
        if: steps.check_project.outputs.version_bumped && !steps.is_pre_release.outputs.pre_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ fromJson(steps.get_version.outputs.top_package).version }}
          release_name: v${{ fromJson(steps.get_version.outputs.top_package).version }}
          body: |
            ${{ steps.deploy_zowe_explorer.outputs.changelog }}
            ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.changelog }}
            ${{ steps.deploy_zowe_explorer_api.outputs.changelog }}
            ${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.changelog }}
          draft: true
          prerelease: false

      - name: Upload the Zowe Explorer Assets
        if: steps.check_project.outputs.version_bumped && !steps.is_pre_release.outputs.pre_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.deploy_zowe_explorer.outputs.archive }}.vsix
          asset_name: ${{ steps.deploy_zowe_explorer.outputs.archive }}.vsix
          asset_content_type: application/octet-stream

      - name: Upload the FTP Extension for Zowe Explorer Assets
        if: steps.check_project.outputs.version_bumped && !steps.is_pre_release.outputs.pre_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.deploy_zowe_explorer_ftp_extension.outputs.archive }}.vsix
          asset_name: ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.archive }}.vsix
          asset_content_type: application/octet-stream

      - name: Upload the Zowe Explorer APIs Assets
        if: steps.check_project.outputs.version_bumped && !steps.is_pre_release.outputs.pre_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.deploy_zowe_explorer_api.outputs.archive }}.tgz
          asset_name: ${{ steps.deploy_zowe_explorer_api.outputs.archive }}.tgz
          asset_content_type: application/octet-stream
      # - name: Upload the ESLint plugin for Zowe Explorer Assets
      #   if: steps.check_project.outputs.version_bumped
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./dist/${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.archive }}.tgz
      #     asset_name: ${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.archive }}.tgz
      #     asset_content_type: application/octet-stream
